clc
clear all
deg = pi/180;
%% 定义机器人
L1= Revolute('d', 0.12015, 'a', 0, 'alpha', pi/2,'modified', ...
    'I', [0.1183 -0.0001 0.0001;
          -0.0001 0.1182 0.0001;
          0.0001 0.0001 0.0140], ...
    'r', [0.0002 0.0002 0.1264], ...
    'm', 5.6431, ...
    'Jm', 2.2e-4, ...
    'G', 81, ...
    'B', 1.48e-3, ...
    'Tc', [0.395 -0.435], ...
    'qlim', [-180 180]*deg );

L2 = Revolute('d', 0.14415, 'a', 0.35, 'alpha', 0, 'offset', pi/2, 'modified', ...
    'I', [0.0723,0.0000,-0.0051;0.0000,0.0784,0.0000;-0.0051,0.0000,0.0169;], ...
    'r', [-0.0062,0.0001,0.1080], ...
    'm', 5.0478, ...
    'Jm', 2.2e-4, ...
    'G', 121, ...
    'B', .817e-3, ...
    'Tc', [0.126 -0.071], ...
    'qlim', [-105 105]*deg );
L3 = Revolute('d', -0.14264, 'a', 0.2945, 'alpha', 0, 'modified', ...
    'I', [0.4263,0.0000,-0.0072;
        0.0000,0.4334,0.0001;
        -0.0072,0.0001,0.0191], ...
    'r', [-0.0131,0.0001,0.2402], ...
    'm', 5.7542, ...
    'Jm', 2.2e-4, ...
    'G', 81, ...
    'B', 1.38e-3, ...
    'Tc', [0.132, -0.105], ...
    'qlim', [-225 45]*deg );

L4 = Revolute('d', 0.1135, 'a', 0, 'alpha', -pi/2, 'offset', -pi/2, 'modified', ...
    'I', [0.0821,0.0000,-0.0314;0.0000,0.1257,0.0001;-0.0314,0.0001,0.0451], ...
    'r', [-0.0850,0.0003,0.1540], ...
    'm', 3.0870, ...
    'Jm', 2.2e-4, ...
    'G', 81, ...
    'B', 71.2e-6, ...
    'Tc', [11.2e-3, -16.9e-3], ...
    'qlim', [-110 110]*deg);
L5 = Revolute('d', 0.1135, 'a', 0, 'alpha', pi/2, 'modified', ...
    'I', [0.0235,0.0000,-0.0002;0.0000,0.0253,0.0000;-0.0002,0.0000,0.0045], ...
    'r', [0.0001,0.0002,0.0982], ...
    'm', 2.0459, ...
    'Jm', 2.2e-4, ...
    'G', 81, ...
    'B', 82.6e-6, ...
    'Tc', [9.26e-3, -14.5e-3], ...
    'qlim', [-115 115]*deg );
L6 = Revolute('d', 0.107, 'a', 0, 'alpha', 0, 'modified', ...
    'I', [0.0684,0.0000,0.0001;0.0000,0.0696,-0.0001;0.0001,-0.0001,0.0047], ...
    'r', [-0.0111,-0.0003,0.1366], ...
    'm', 2.6317, ...
    'Jm', 2.2e-4, ...
    'G', 51, ...
    'B', 36.7e-6, ...
    'Tc', [3.96e-3, -10.5e-3], ...
    'qlim', [-180 180]*deg );
robot=SerialLink([L1,L2,L3,L4,L5,L6],'name','robot','comment','LL');  %SerialLink类函数
%% 定义输入参数
%通过手动输入各个连杆转角，模型会自动运动到相应位置
theta1=[0 0 0 pi/2 0 0];    %机器人伸直且垂直
%robot.plot(theta1);  %SerialLink类函数,显示机器人图像
theta2=[0.00246	-1.0419	-0.4556	1.4975	-1.573	-1.5707];
%robot.plot(theta2);
t= 0:0.01:2;
%% 绘制机器人运动动画
% 生成关节轨迹
[g, gd, gdd] = jtraj(theta1, theta2, t); % 获得关节位置、速度和加速度
[q,qd,qdd]=jtraj(theta1,theta2,t);
% 创建视频写入对象
v = VideoWriter('dynamics.mp4', 'MPEG-4');
v.FrameRate = 30; % 设置帧率，可以根据需要调整
open(v);

% 初始化轨迹记录
end_effector_trajectory = [];

% 创建图形窗口
figure;

% 绘制并保存动画
i = 1:6;
for k = 1:length(t)
    % 绘制机器人在第k个时间步的姿态
    robot.plot(g(k,:)); 
    
    % 获取机器人末端执行器位置
    end_effector_pos = robot.fkine(g(k,:)).t; % 获取末端执行器的平移向量
    
    % 记录末端执行器位置
    end_effector_trajectory = [end_effector_trajectory; end_effector_pos'];
    
    % 绘制轨迹
    hold on;
    plot3(end_effector_trajectory(:,1), end_effector_trajectory(:,2), end_effector_trajectory(:,3), 'r', 'LineWidth', 2);
    hold off;
    
    % 捕捉当前图像
    frame = getframe(gcf); 
    
    % 写入视频
    writeVideo(v, frame); 
end

% 关闭视频写入对象
close(v);

%% 绘制结果图
% 子图1：关节位置
subplot(2,2,1);
plot(t, q); % 假设 t 是时间向量，q 是关节位置矩阵
grid on;
title('Joint Displacement');
xlabel('t (s)');
ylabel('angle (rad)');
legend('joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'joint6');

% 子图2：关节速度
subplot(2,2,2);
plot(t, qd); % 假设 qd 是关节速度矩阵
grid on;
title('Joint Velocity');
xlabel('t (s)');
ylabel('velocity (rad/s)');
legend('joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'joint6');

% 子图3：关节加速度
subplot(2,2,3);
plot(t, qdd); % 假设 qdd 是关节加速度矩阵
grid on;
title('Joint Acceleration');
xlabel('t (s)');
ylabel('acceleration (rad/s^2)');
legend('joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'joint6');

% 计算关节力矩
Q = robot.rne(q, qd, qdd); % 假设 robot.rne() 是计算关节力矩的函数

% 子图4：关节力矩
subplot(2,2,4);
plot(t, Q); % 假设 Q 是关节力矩矩阵
grid on;
title('Joint Torque');
xlabel('t (s)');
ylabel('torque (Nm)');
legend('joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'joint6');
